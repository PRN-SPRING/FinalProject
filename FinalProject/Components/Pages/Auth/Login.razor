@page "/login"
@layout FinalProject.Components.Layout.LoginLayout
@using FinalProject.ViewModel
@using Repository.Interface
@inject IUserRepository userRepository;
@using System.Security.Claims
@inject NavigationManager navigation;

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator/>
            <div class="mb-3 text-center flex-column">
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username"/>
                <ValidationMessage For="() => Model.Username"/>
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" type="password" placeholder="Password"/>
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>


<style>
    h2 {
    text-align: center;
    margin-bottom: 1.5rem;
    color: #333;
    }

    .form-group {
    margin-bottom: 1rem;
    }

    .form-control {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-bottom: 1rem;
    }

    .btn-primary {
    width: 100%;
    padding: 0.75rem;
    background-color: #0d6efd;
    border: none;
    border-radius: 4px;
    color: white;
    cursor: pointer;
    margin-bottom: 1rem;
    }

    .btn-primary:hover {
    background-color: #0b5ed7;
    }

    .register-link {
    text-align: center;
    }

    .register-link a {
    color: #0d6efd;
    text-decoration: none;
    }

    .register-link a:hover {
    text-decoration: underline;
    }

    .error-message {
    color: red;
    text-align: center;
    margin-bottom: 10px;
    font-size: 14px;
    }

</style>

@code {
    [CascadingParameter]
    public HttpContext? httpContext { get; set; }

    private string? errorMessage;

    [SupplyParameterFromForm]
    public ViewModel Model { get; set; } = new();

    private async Task Authenticate() 
    {
            var isAuthenticated = await userRepository.AuthenticateAsync(Model.Username, Model.Password);
            if (isAuthenticated)
            {
                var user = await userRepository.GetByUsernameAsync(Model.Username);
                var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, Model.Username),
                new Claim(ClaimTypes.Role, user.Role)
            };
                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principal = new ClaimsPrincipal(identity);
                await httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);

                await Task.Delay(1000);

                   navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid username or password. Please try again.";
            }
    }
}
