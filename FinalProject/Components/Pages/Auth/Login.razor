@page "/login"
@layout FinalProject.Components.Layout.LandingLayout.Landing1
@using Data.DTOs
@using Repository.Interface
@inject IUserRepository userRepository;
@using System.Security.Claims
@inject NavigationManager navigation;

<div class="container-fluid d-flex justify-content-center align-items-center vh-100">
    <div class="col-lg-4 p-4 border shadow-sm bg-white rounded login-page">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center">
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.Username" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" type="password" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .login-page h3 {
        text-align: center;
        color: #333;
    }

    .login-page .form-control {
        width: 100%;
        padding: 0.75rem;
    }

    .login-page .btn-primary {
        width: 100%;
        padding: 0.75rem;
    }
</style>

@code {
    [CascadingParameter]
    public HttpContext? httpContext { get; set; }

    private string? errorMessage;

    [SupplyParameterFromForm]
    public UserDTO Model { get; set; } = new();

    private async Task Authenticate() 
    {
            var isAuthenticated = await userRepository.AuthenticateAsync(Model.Username, Model.Password);
            if (isAuthenticated)
            {
                var user = await userRepository.GetByUsernameAsync(Model.Username);
                var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, Model.Username),
                new Claim(ClaimTypes.Role, user.Role),
                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString())
            };
                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principal = new ClaimsPrincipal(identity);
                await httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);

                await Task.Delay(1000);

                   navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Invalid username or password. Please try again.";
            }
    }
}
