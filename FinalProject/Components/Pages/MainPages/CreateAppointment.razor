@page "/create-appointment"
@using Repository.Interface
@using Data.Entities
@using Data.DTOs
@using System.Security.Claims
@inject IChildRepository ChildRepository
@inject IVaccineRepository VaccineRepository
@inject IVaccinePackageRepository VaccinePackageRepository
@inject IAppointmentRepository AppointmentRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@layout FinalProject.Components.Layout.LandingLayout.Landing1
@rendermode InteractiveServer
<PageTitle>Create Appointment</PageTitle>

<h3>Create Appointment</h3>

<EditForm Model="@appointment" OnValidSubmit="HandleValidSubmit" FormName ="CreateAppointment">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Select Child -->
    <div class="form-group">
        <label for="child">Select Child</label>
        <InputSelect @bind-Value="appointment.ChildId" class="form-control">
            <option value="">-- Select Child --</option>
            @foreach (var child in children)
            {
                <option value="@child.Id">@child.FullName</option>
            }
        </InputSelect>
    </div>


    <!-- Select Vaccine -->
    <div class="form-group">
        <label for="vaccine">Select Vaccine</label>
        <InputSelect @bind-Value="selectedVaccineId" class="form-control" >
            <option value="0">-- Select Vaccine --</option>
            @foreach (var vaccine in vaccines)
            {
                <option value="@vaccine.Id">@vaccine.Name</option>
            }
        </InputSelect>
    </div>

    <!-- Select Vaccine Package -->
    <div class="form-group">
        <label for="vaccinePackage">Select Vaccine Package</label>
        <InputSelect @bind-Value="selectedVaccinePackageId" class="form-control">
            <option value="0">-- Select Vaccine Package --</option>
            @foreach (var package in vaccinePackages)
            {
                <option value="@package.Id">@package.Name</option>
            }
        </InputSelect>
    </div>

    <!-- Appointment Date -->
    <div class="form-group">
        <label for="appointmentDate">Appointment Date</label>
        <InputDate @bind-Value="appointment.AppointmentDate" class="form-control"/>
    </div>

    <!-- Notes -->
    <div class="form-group">
        <label for="notes">Notes</label>
        <InputTextArea @bind-Value="appointment.Notes" class="form-control" />
    </div>

    <!-- Submit Button -->
    @* <button type="submit" class="btn btn-primary">Create Appointment</button> *@
    <button type="button" class="btn btn-primary" @onclick="ShowTransactionModal">Create Appointment</button>
</EditForm>

<div class="modal @(showModal ? "show d-block" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Transaction</h5>
                <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="img-placeholder border rounded p-3 mb-2" style="display: flex; align-items: center; justify-content: center; background-color: #f8f9fa;">
                    <img src="https://api.vietqr.io/image/970432-0354031289-Hpzk74d.jpg?accountName=NG%20CONG%20MINH%20TUAN" alt="Transaction Receipt" style="width: 80%; max-height: 100%;" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                <button type="button" class="btn btn-success" @onclick="HandleValidSubmit">
                    I have done the transaction
                </button>
            </div>
        </div>
    </div>
</div>

<div class="@(showModal ? "modal-backdrop show" : "d-none")"></div>

@code {

    [SupplyParameterFromForm]
    private CreateAppointmentDTO appointment { get; set; } = new()
    {
        VaccineId = null,
        AppointmentDate = DateTime.Now,
        VaccinePackageId = null
    };


    private List<Child> children = new List<Child>();
    private List<VaccineDTO> vaccines = new List<VaccineDTO>();
    private List<VaccinePackage> vaccinePackages = new List<VaccinePackage>();
    private bool showModal = false;
    [SupplyParameterFromForm]
    private int? selectedVaccineId { get; set; } 
    [SupplyParameterFromForm]
    private int? selectedVaccinePackageId { get; set; } 

    private void ShowTransactionModal()
    {
        showModal = true;
    }

    // Close the modal
    private void CloseModal()
    {
        showModal = false;
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        if (userId == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }
        // Fetch the list of children, vaccines, and vaccine packages
        if (!string.IsNullOrEmpty(userId))
        {
            children = await ChildRepository.GetChildrenByCustomerIdAsync(int.Parse(userId));
            appointment.CustomerId = int.Parse(userId);
        }
        vaccines = (await VaccineRepository.GetVaccinesAsync()).ToList();
        vaccinePackages = (await VaccinePackageRepository.GetAllVaccinePackagesAsync()).ToList();
    }

    private async Task HandleValidSubmit()
    {
        

        // Create a new AppointmentDTO object and populate it with form data
        var appointmentDto = new CreateAppointmentDTO
            {
                CustomerId = appointment.CustomerId, // Set from the authenticated user
                ChildId = appointment.ChildId,
                VaccineId = selectedVaccineId == 0 ? null : selectedVaccineId,
                VaccinePackageId = selectedVaccinePackageId == 0 ? null : selectedVaccinePackageId,
                AppointmentDate = appointment.AppointmentDate,
                Status = "Created", // Default status
                Notes = appointment.Notes
            };
        // Call the repository to create the appointment
        
            await AppointmentRepository.CreateAppointmentAsync(appointmentDto);
            Navigation.NavigateTo("/appointments");
        
     
    }


}