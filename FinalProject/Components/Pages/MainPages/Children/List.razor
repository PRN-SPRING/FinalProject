@page "/children"
@layout FinalProject.Components.Layout.LandingLayout.Landing1
@using Repository.Interface
@using BussinessObject.Entities
@using System.Security.Claims
@inject IChildRepository ChildRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@rendermode InteractiveServer


<div class="container mt-4">
    <h2 class="text-center text-primary mb-4">My Children</h2>

    @if (Children == null)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (Children.Count == 0)
    {
        <div class="alert alert-warning text-center">
            <i class="bi bi-exclamation-circle"></i> No child profiles found.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover border rounded shadow">
                <thead class="table-dark">
                    <tr>
                        <th>Full Name</th>
                        <th>Birthdate</th>
                        <th>Gender</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var child in Children)
                    {
                        <tr>
                            <td>@child.FullName</td>
                            <td>@child.Birthdate.ToShortDateString()</td>
                            <td>@child.Gender</td>
                            <td class="text-center">
                                <button class="btn btn-outline-primary btn-sm me-2" @onclick="() => OpenEditPopup(child)">
                                    <i class="bi bi-pencil-square"></i> Edit
                                </button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="() => OpenDeletePopup(child)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <div class="text-center mt-3">
        <a href="/children/create" class="btn btn-success">
            <i class="bi bi-plus-circle"></i> Create Children Profile
        </a>
    </div>
</div>

<!-- Edit Popup -->
@if (showEditPopup)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-primary">Edit Child</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditPopup"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Full Name:</label>
                        <input type="text" @bind="selectedChild.FullName" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Birthdate:</label>
                        <input type="date" @bind="selectedChild.Birthdate" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Gender:</label>
                        <select @bind="selectedChild.Gender" class="form-control">
                            <option>Male</option>
                            <option>Female</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="SaveChanges">Save</button>
                    <button class="btn btn-secondary" @onclick="CloseEditPopup">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Popup -->
@if (showDeletePopup)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeletePopup"></button>
                </div>
                <div class="modal-body text-center">
                    <p>Are you sure you want to delete <strong>@selectedChild.FullName</strong>?</p>
                </div>
                <div class="modal-footer justify-content-center">
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Yes, Delete</button>
                    <button class="btn btn-secondary" @onclick="CloseDeletePopup">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}





@code {
    private List<Child> Children { get; set; } = new();
    private bool showEditPopup = false;
    private bool showDeletePopup = false;
    private Child selectedChild = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        if (userId == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        Children = await ChildRepository.GetChildrenByCustomerIdAsync(int.Parse(userId));
        StateHasChanged();
    }
    
    private void OpenEditPopup(Child child)
    {
        selectedChild = new Child
        {
            Id = child.Id,
            FullName = child.FullName,
            Birthdate = child.Birthdate,
            Gender = child.Gender
        };
        showEditPopup = true;
        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        await ChildRepository.UpdateChildAsync(selectedChild);
        showEditPopup = false;
        await OnInitializedAsync();
    }

    private void CloseEditPopup()
    {
        showEditPopup = false;
    }

    private void OpenDeletePopup(Child child)
    {
        selectedChild = child;
        showDeletePopup = true;
    }

    private async Task ConfirmDelete()
    {
        await ChildRepository.DeleteChildAsync(selectedChild.Id);
        showDeletePopup = false;
        await OnInitializedAsync();
    }

    private void CloseDeletePopup()
    {
        showDeletePopup = false;
    }
}
