@page "/children"
@layout FinalProject.Components.Layout.LandingLayout.Landing1
@using Repository.Interface
@using Data.Entities
@using System.Security.Claims
@inject IChildRepository ChildRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<h2>My Children</h2>

@if (Children == null)
{
    <p>Loading...</p>
}
else if (Children.Count == 0)
{
    <p>No child profiles found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Full Name</th>
                <th>Birthdate</th>
                <th>Gender</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var child in Children)
            {
                <tr>
                    <td>@child.FullName</td>
                    <td>@child.Birthdate.ToShortDateString()</td>
                    <td>@child.Gender</td>
                    <td>
                        <button class="btn btn-primary me-2" @onclick="@(() => OpenEditPopup(child))">Edit</button>
                        <button class="btn btn-danger" @onclick="@(() => OpenDeletePopup(child))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


<a href="/children/create" class="btn btn-secondary">Create Children Profile</a>

<!-- Edit Popup -->
@if (showEditPopup)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Edit Child</h3>
            <label>Full Name:</label>
            <input type="text" @bind="selectedChild.FullName" class="form-control" />
            <label>Birthdate:</label>
            <input type="date" @bind="selectedChild.Birthdate" class="form-control" />
            <label>Gender:</label>
            <select @bind="selectedChild.Gender" class="form-control">
                <option>Male</option>
                <option>Female</option>
            </select>
            <div class="modal-buttons">
                <button class="btn btn-primary" @onclick="SaveChanges">Save</button>
                <button class="btn btn-secondary" @onclick="CloseEditPopup">Cancel</button>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Popup -->
@if (showDeletePopup)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Are you sure?</h3>
            <p>Do you really want to delete <strong>@selectedChild.FullName</strong>?</p>
            <div class="modal-buttons">
                <button class="btn btn-danger" @onclick="ConfirmDelete">Yes</button>
                <button class="btn btn-secondary" @onclick="CloseDeletePopup">No</button>
            </div>
        </div>
    </div>
}



@code {
    private List<Child> Children { get; set; } = new();
    private bool showEditPopup = false;
    private bool showDeletePopup = false;
    private Child selectedChild = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        if (userId == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        Children = await ChildRepository.GetChildrenByCustomerIdAsync(int.Parse(userId));
        StateHasChanged();
    }
    
    private void OpenEditPopup(Child child)
    {
        selectedChild = new Child
        {
            Id = child.Id,
            FullName = child.FullName,
            Birthdate = child.Birthdate,
            Gender = child.Gender
        };
        showEditPopup = true;
        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        await ChildRepository.UpdateChildAsync(selectedChild);
        showEditPopup = false;
        await OnInitializedAsync();
    }

    private void CloseEditPopup()
    {
        showEditPopup = false;
    }

    private void OpenDeletePopup(Child child)
    {
        selectedChild = child;
        showDeletePopup = true;
    }

    private async Task ConfirmDelete()
    {
        await ChildRepository.DeleteChildAsync(selectedChild.Id);
        showDeletePopup = false;
        await OnInitializedAsync();
    }

    private void CloseDeletePopup()
    {
        showDeletePopup = false;
    }
}
