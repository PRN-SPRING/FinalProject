@page "/admin/user/delete"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.EntityFrameworkCore
@using BussinessObject.DTOs
@using Repository.Interface
@inject IUserRepository UserRepository
@inject NavigationManager NavigationManager
@layout FinalProject.Components.Layout.AdminLayout.AdminMainLayout
<PageTitle>Delete</PageTitle>

<main class="container my-4">
    <div class="card shadow p-4">
        <h1 class="text-center text-danger">
            <i class="bi bi-exclamation-triangle-fill"></i> Delete User
        </h1>
        <p class="text-center text-muted">Are you sure you want to delete this user?</p>
        <hr />

        @if (user is null)
        {
            <div class="text-center">
                <p class="text-muted"><em>Loading user details...</em></p>
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <dl class="row">
                        <dt class="col-sm-4 text-primary">Username</dt>
                        <dd class="col-sm-8">@user.Username</dd>

                        <dt class="col-sm-4 text-primary">Full Name</dt>
                        <dd class="col-sm-8">@user.FullName</dd>

                        <dt class="col-sm-4 text-primary">Email</dt>
                        <dd class="col-sm-8">@user.Email</dd>

                        <dt class="col-sm-4 text-primary">Phone Number</dt>
                        <dd class="col-sm-8">@user.PhoneNumber</dd>

                        <dt class="col-sm-4 text-primary">Role</dt>
                        <dd class="col-sm-8">@user.Role</dd>

                        <dt class="col-sm-4 text-primary">Address</dt>
                        <dd class="col-sm-8">@user.Address</dd>

                        <dt class="col-sm-4 text-primary">Gender</dt>
                        <dd class="col-sm-8">@user.Gender</dd>

                        <dt class="col-sm-4 text-primary">Birthdate</dt>
                        <dd class="col-sm-8">@user.Birthdate?.ToString("yyyy-MM-dd")</dd>

                        @if (!string.IsNullOrEmpty(user.Specialty))
                        {
                            <dt class="col-sm-4 text-primary">Specialty</dt>
                            <dd class="col-sm-8">@user.Specialty</dd>
                        }

                        @if (!string.IsNullOrEmpty(user.LicenseNumber))
                        {
                            <dt class="col-sm-4 text-primary">License Number</dt>
                            <dd class="col-sm-8">@user.LicenseNumber</dd>
                        }

                        @if (!string.IsNullOrEmpty(user.Position))
                        {
                            <dt class="col-sm-4 text-primary">Position</dt>
                            <dd class="col-sm-8">@user.Position</dd>
                        }

                        @if (user.YearsOfExperience > 0)
                        {
                            <dt class="col-sm-4 text-primary">Years of Experience</dt>
                            <dd class="col-sm-8">@user.YearsOfExperience</dd>
                        }
                    </dl>

                    <div class="text-center mt-4">
                        <EditForm method="post" Model="user" OnValidSubmit="DeleteUser" FormName="delete" Enhance>
                            <button type="submit" class="btn btn-danger px-4 btn-lg" disabled="@(user is null)">
                                <i class="bi bi-trash-fill"></i> Confirm Delete
                            </button>
                            <a href="/admin" class="btn btn-secondary ms-2 px-4 btn-lg">
                                <i class="bi bi-arrow-left"></i> Back to List
                            </a>
                        </EditForm>
                    </div>
                </div>
            </div>
        }
    </div>
</main>


@code {
    private UserInfoDTO? user;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await UserRepository.GetByIdAsync(Id);
    }

    private async Task DeleteUser()
    {
        await UserRepository.DeleteUserAsync(Id);
        NavigationManager.NavigateTo("/admin");
    }
}
