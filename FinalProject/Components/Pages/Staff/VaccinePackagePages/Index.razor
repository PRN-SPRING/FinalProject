@page "/staff/manage-vaccinepackages"
@using Data.DTOs
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Data
@using Repository.Interface
@inject IVaccinePackageRepository VaccinePackageRepository
@layout FinalProject.Components.Layout.StaffLayout.StaffLayout
@rendermode InteractiveServer

<PageTitle>Vaccine Packages Management</PageTitle>

<div class="container mt-4">
    <div class="card shadow-lg p-4">
        <h2 class="text-primary text-center fw-bold">Vaccine Packages Management</h2>
        <hr />

        <div class="d-flex justify-content-between mb-3">
            <a href="staff/vaccinepackages/create" class="btn btn-success">
                <i class="fas fa-plus"></i> Create New
            </a>

            <input type="text" class="form-control w-50" placeholder="Search by name or description..." @bind="searchTerm" @oninput="FilterPackages" />
        </div>

        @if (vaccinePackages == null)
        {
            <div class="alert alert-info text-center">Loading...</div>
        }
        else if (!filteredPackages.Any())
        {
            <div class="alert alert-warning text-center">No vaccine packages found.</div>
        }
        else
        {
            <div class="table-responsive table-container">
                <table class="table table-striped table-hover table-bordered">
                    <thead class="table-header">
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Price</th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var package in filteredPackages)
                        {
                            <tr>
                                <td>@package.Name</td>
                                <td>@package.Description</td>
                                <td>@package.Price.ToString("C")</td>
                                <td class="text-center">
                                    <a href="@($"staff/vaccinepackages/edit?id={package.Id}")" class="btn btn-warning btn-sm">
                                        <i class="fas fa-edit"></i> Edit
                                    </a>
                                    <a href="@($"staff/vaccinepackages/details?id={package.Id}")" class="btn btn-info btn-sm">
                                        <i class="fas fa-eye"></i> Details
                                    </a>
                                    <a href="@($"staff/vaccinepackages/delete?id={package.Id}")" class="btn btn-danger btn-sm">
                                        <i class="fas fa-trash"></i> Delete
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

<style>
    .table-container {
        max-height: 400px; /* Giới hạn chiều cao bảng */
        overflow-y: auto; /* Kích hoạt thanh cuộn dọc khi cần */
        border: 1px solid #ddd; /* Viền cho đẹp */
    }

    .table-header {
        position: sticky;
        top: 0;
        background: white;
        z-index: 2;
    }
</style>

@code {
    private List<VaccinePackageDTO>? vaccinePackages;
    private List<VaccinePackageDTO> filteredPackages = new();
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        vaccinePackages = (await VaccinePackageRepository.GetAllVaccinePackagesDtoAsync()).ToList();
        filteredPackages = vaccinePackages;
    }

    private void FilterPackages(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredPackages = vaccinePackages!;
        }
        else
        {
            var keyword = searchTerm.ToLower();
            filteredPackages = vaccinePackages!
                .Where(p => p.Name.ToLower().Contains(keyword) || p.Description.ToLower().Contains(keyword))
                .ToList();
        }
    }
}
