@page "/staff/vaccinepackages/edit"
@using Microsoft.EntityFrameworkCore
@using Data.DTOs
@using Repository.Interface
@inject IVaccinePackageRepository VaccinePackageRepository
@inject IVaccineRepository VaccineRepository
@inject NavigationManager NavigationManager
@layout FinalProject.Components.Layout.StaffLayout.StaffLayout
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Edit Vaccine Package</PageTitle>

<div class="container mt-5">
    <div class="card shadow-lg p-4">
        <h2 class="text-primary text-center">Edit Vaccine Package</h2>
        <hr />

        @if (VaccinePackage is null)
        {
            <div class="d-flex justify-content-center mt-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <EditForm Model="VaccinePackage" OnValidSubmit="UpdateVaccinePackage">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />

                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label fw-bold">Package Name:</label>
                            <InputText @bind-Value="VaccinePackage.Name" class="form-control" placeholder="Enter package name" />
                            <ValidationMessage For="() => VaccinePackage.Name" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label class="form-label fw-bold">Price:</label>
                            <InputNumber @bind-Value="VaccinePackage.Price" class="form-control" placeholder="Enter price" />
                            <ValidationMessage For="() => VaccinePackage.Price" class="text-danger" />
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label fw-bold">Description:</label>
                    <InputText @bind-Value="VaccinePackage.Description" class="form-control" placeholder="Enter package description" />
                    <ValidationMessage For="() => VaccinePackage.Description" class="text-danger" />
                </div>

                <h4 class="mt-4 text-secondary">Vaccine Details</h4>
                <div class="row mb-3">
                    <div class="col-md-8">
                        <label class="form-label fw-bold">Select Vaccine:</label>
                        <InputSelect @bind-Value="SelectedVaccineId" class="form-select">
                            <option value="">-- Select Vaccine --</option>
                            @foreach (var vaccine in Vaccines)
                            {
                                <option value="@vaccine.Id">@vaccine.Name</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label fw-bold">Quantity:</label>
                        <InputNumber @bind-Value="SelectedQuantity" class="form-control" placeholder="Enter quantity" />
                    </div>
                </div>
                <button type="button" class="btn btn-outline-primary" @onclick="AddVaccineDetail">Add Vaccine</button>

                @if (VaccinePackage.PackageDetails != null && VaccinePackage.PackageDetails.Any())
                {
                    <ul class="list-group mt-3">
                        @foreach (var detail in VaccinePackage.PackageDetails)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span><strong>@detail.VaccineName</strong> - Quantity: @detail.Quantity</span>
                                <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveVaccineDetail(detail)">Remove</button>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="mt-3 text-muted">No vaccines added to the package yet.</p>
                }

                <div class="d-flex justify-content-between mt-4">
                    <a href="/staff/manage-vaccinepackages" class="btn btn-outline-secondary">Back to List</a>
                    <button type="submit" class="btn btn-success">Save Changes</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    private VaccinePackageDTO? VaccinePackage { get; set; }
    private List<VaccineDTO> Vaccines = new();
    private int SelectedVaccineId { get; set; }
    private int SelectedQuantity { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Vaccines = (await VaccineRepository.GetVaccinesAsync()).ToList();
        VaccinePackage = await VaccinePackageRepository.GetVaccinePackageByIdAsync(Id);

        if (VaccinePackage is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private void AddVaccineDetail()
    {
        var vaccine = Vaccines.FirstOrDefault(v => v.Id == SelectedVaccineId);
        if (vaccine != null && SelectedQuantity > 0)
        {
            VaccinePackage.PackageDetails.Add(new VaccinePackageDetailDTO
            {
                VaccineId = vaccine.Id,
                VaccineName = vaccine.Name,
                Quantity = SelectedQuantity
            });
            SelectedVaccineId = 0;
            SelectedQuantity = 0;
        }
    }

    private void RemoveVaccineDetail(VaccinePackageDetailDTO detail)
    {
        VaccinePackage.PackageDetails.Remove(detail);
    }

    private async Task UpdateVaccinePackage()
    {
        if (VaccinePackage == null) return;

        bool isUpdated = await VaccinePackageRepository.UpdateVaccinePackageAsync(VaccinePackage.Id, VaccinePackage);
        if (isUpdated)
        {
            await JSRuntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Success!",
                text = "Vaccine package has been updated successfully.",
                icon = "success",
                confirmButtonText = "OK"
            });

            NavigationManager.NavigateTo("/staff/manage-vaccinepackages");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Error!",
                text = "Failed to update vaccine package. Please try again.",
                icon = "error",
                confirmButtonText = "OK"
            });
        }
    }
}

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
