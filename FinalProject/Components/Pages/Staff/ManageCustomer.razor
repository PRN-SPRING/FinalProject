@page "/staff/manage-service"
@attribute [Authorize(Roles = "Staff")]
@layout FinalProject.Components.Layout.StaffLayout.StaffLayout
@rendermode InteractiveServer

@using Data.DTOs
@using Data.Entities
@using Repository.Interface
@inject IFeedbackRepository FeedbackRepository
@inject IUserRepository UserRepository
@inject IChildRepository ChildRepository
@inject IJSRuntime JS

<PageTitle>Customer Service Management</PageTitle>

<style>
    .table-container {
        max-height: 400px; /* Giới hạn chiều cao */
        overflow-y: auto; /* Kích hoạt cuộn dọc khi quá nhiều hàng */
        border: 1px solid #ddd; /* Tạo viền để dễ nhìn */
    }

        .table-container table {
            width: 100%;
            border-collapse: collapse;
        }

</style>

<h2 class="mb-4">Customer Service Management</h2>

<!-- Tabs -->
<ul class="nav nav-tabs">
    <li class="nav-item">
        <button class="nav-link @(currentTab == "customers" ? "active" : "")" @onclick='() => ChangeTab("customers")'>Customers</button>
    </li>
    <li class="nav-item">
        <button class="nav-link @(currentTab == "children" ? "active" : "")" @onclick='() => ChangeTab("children")'>Children</button>
    </li>
    <li class="nav-item">
        <button class="nav-link @(currentTab == "feedback" ? "active" : "")" @onclick='() => ChangeTab("feedback")'>Feedback</button>
    </li>
</ul>

<!-- Content for each tab -->
<div class="tab-content mt-3">
    @if (currentTab == "customers")
    {
        <div class="mb-3 d-flex">
            <div class="input-group">
                <input type="text" @bind="customerSearchTerm" placeholder="Search Customers..." class="form-control" />
                <button class="btn btn-outline-secondary" type="button" @onclick="SearchCustomers">
                    <i class="fas fa-search"></i>
                </button>
            </div>
        </div>
        <div class="table-container">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone Number</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Customers != null)
                    {
                        @foreach (var customer in SearchResults)
                        {
                            <tr>
                                <td>@customer.Id</td>
                                <td>@customer.FullName</td>
                                <td>@customer.Email</td>
                                <td>@customer.PhoneNumber</td>
                                <td>
                                    <button class="btn btn-info btn-sm" @onclick="() => ShowCustomerDetail(customer)">
                                        📄 Detail
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
    else if (currentTab == "children")
    {
        <div class="mb-3 d-flex">
            <div class="input-group">
                <input type="text" @bind="childSearchTerm" placeholder="Search Children..." class="form-control" />
                <button class="btn btn-outline-secondary" type="button" @onclick="SearchChildren">
                    <i class="fas fa-search"></i>
                </button>
            </div>
        </div>
        <div class="table-container">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Birthdate</th>
                        <th>Gender</th>
                        <th>Customer</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var child in SearchChildrenl)
                    {
                        <tr>
                            <td>@child.Id</td>
                            <td>@child.FullName</td>
                            <td>@child.Birthdate.ToShortDateString()</td>
                            <td>@child.Gender</td>
                            <td>@child.CustomerName</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else if (currentTab == "feedback")
    {
        <div class="mb-3 d-flex">
            <div class="input-group">
                <input type="text" @bind="feedbackSearchTerm" placeholder="Search Feedback..." class="form-control" />
                <button class="btn btn-outline-secondary" type="button" @onclick="SearchFeedbacks">
                    <i class="fas fa-search"></i>
                </button>
            </div>
        </div>
        <div class="table-container">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Customer</th>
                        <th>Appointment</th>
                        <th>Rating</th>
                        <th>Comments</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var feedback in SearchFeedbacksl)
                    {
                        <tr>
                            <td>@feedback.Id</td>
                            <td>@feedback.CustomerName</td>
                            <td>@feedback.AppointmentId</td>
                            <td>@feedback.Rating ⭐</td>
                            <td>@(feedback.Comments.Length > 50 ? feedback.Comments.Substring(0, 50) + "..." : feedback.Comments)</td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteFeedback(feedback.Id)">
                                    🗑️ Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private string currentTab = "customers";

    private List<UserInfoDTO> Customers = new List<UserInfoDTO>();
    private List<UserInfoDTO> SearchResults = new List<UserInfoDTO>();
    private List<ChildDTO> Children = new List<ChildDTO>();
    private List<ChildDTO> SearchChildrenl = new List<ChildDTO>();
    private List<FeedbackDTO> Feedbacks = new List<FeedbackDTO>();
    private List<FeedbackDTO> SearchFeedbacksl = new List<FeedbackDTO>();
    private string customerSearchTerm = "";
    private string childSearchTerm = "";
    private string feedbackSearchTerm = "";


    protected override async Task OnInitializedAsync()
    {
        // Initialize the customer list
        Customers = (await UserRepository.GetAllUsers()).ToList();
        SearchResults = Customers;

        // Create the list of children from Customers
        Children = (await ChildRepository.GetAllChildrenAsync()).ToList();
        SearchChildrenl = Children;

        // Create the feedback list
        Feedbacks = (await FeedbackRepository.GetAllFeedbacksAsync()).ToList();
        SearchFeedbacksl = Feedbacks;
    }

    private void ChangeTab(string tab)
    {
        currentTab = tab;
        StateHasChanged(); // Ensure UI updates after tab change
    }

    private async Task DeleteFeedback(int feedbackId)
    {
        // Show confirmation dialog
        var confirm = await JS.InvokeAsync<object>("Swal.fire", new
        {
            title = "Confirm Deletion",
            text = "Are you sure you want to delete this feedback?",
            icon = "warning",
            showCancelButton = true,
            confirmButtonText = "Delete",
            cancelButtonText = "Cancel"
        });

        if (confirm == null || !((bool?)((System.Text.Json.JsonElement)confirm).GetProperty("isConfirmed").GetBoolean()) == true)
        {
            return;
        }

        bool isDeleted = await FeedbackRepository.DeleteFeedbackAsync(feedbackId);

        if (isDeleted)
        {
            Feedbacks.RemoveAll(f => f.Id == feedbackId);
            StateHasChanged();

            // Show success notification
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Success!",
                text = "The feedback has been deleted.",
                icon = "success",
                confirmButtonText = "OK"
            });
        }
        else
        {
            Console.WriteLine("Delete failure!");
        }
    }

    private async Task ShowCustomerDetail(UserInfoDTO customer)
    {
        try
        {
            await Task.Yield();
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Customer Details",
                html = $@"
                <div style='text-align: left; font-family: monospace;'>
                    <b>Username:</b> {customer.Username}<br>
                    <b>Full Name:</b> {customer.FullName}<br>
                    <b>Email:</b> {customer.Email}<br>
                    <b>Phone Number:</b> {customer.PhoneNumber}<br>
                    <b>Address:</b> {customer.Address}<br>
                    <b>Gender:</b> {customer.Gender}<br>
                    <b>Birthdate:</b> {customer.Birthdate?.ToShortDateString()}<br>
                    <b>Specialty:</b> {customer.Specialty}<br>
                    <b>License Number:</b> {customer.LicenseNumber}<br>
                    <b>Position:</b> {customer.Position}<br>
                    <b>Years of Experience:</b> {customer.YearsOfExperience}
                </div>
            ",
                icon = "info",
                confirmButtonText = "OK"
            });
        }
        catch (JSException ex)
        {
            Console.WriteLine($"JS Exception in ShowCustomerDetail: {ex.Message}");
        }
    }

    private void SearchCustomers()
    {
        if (string.IsNullOrEmpty(customerSearchTerm))
        {
            SearchResults = Customers;
        }
        else
        {
            SearchResults = Customers.Where(c =>
                (!string.IsNullOrEmpty(c.FullName) && c.FullName.Contains(customerSearchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.Email) && c.Email.Contains(customerSearchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(c.PhoneNumber) && c.PhoneNumber.Contains(customerSearchTerm, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }
    }

    private void SearchChildren()
    {
        if (string.IsNullOrEmpty(childSearchTerm))
        {
            SearchChildrenl = Children;
        }
        else
        {
            SearchChildrenl = Children.Where(c =>
                    c.FullName.Contains(childSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.CustomerName.Contains(childSearchTerm, StringComparison.OrdinalIgnoreCase)
                ).ToList();
        }
    }

    private void SearchFeedbacks()
    {
        if (string.IsNullOrEmpty(feedbackSearchTerm))
        {
            SearchFeedbacksl = Feedbacks;
        }
        else
        {
            SearchFeedbacksl = Feedbacks.Where(f =>
                    f.CustomerName.Contains(feedbackSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    f.Comments.Contains(feedbackSearchTerm, StringComparison.OrdinalIgnoreCase)
                ).ToList();
        }
    }

}

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


