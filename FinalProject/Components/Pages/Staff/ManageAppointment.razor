@page "/manage-appointment"
@layout FinalProject.Components.Layout.StaffLayout
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@inject IJSRuntime JSRuntime

<div>
    <h4>Appointments</h4>
    <div class="d-flex justify-content-between align-items-center mb-2">
        <div></div> 
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search..." @bind="searchTerm" />
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="SearchAppointments">Search</button>
            </div>
        </div>
    </div>
    <div class="table-container">
        <table class="table table-bordered table-fixed">
            <thead>
                <tr>
                    <th style="width: 150px;">Customer</th>
                    <th style="width: 150px;">Child</th>
                    <th style="width: 200px;">Vaccine/Package</th>
                    <th style="width: 200px;">Appointment Date</th>
                    <th style="width: 150px;">Status</th>
                    <th style="width: 300px;">Notes</th>
                    <th style="width: 150px;">Created By</th>
                    <th style="width: 200px;">Date Created</th>
                    <th style="width: 110px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var appointment in filteredAppointments)
                {
                    <tr>
                        <td>@appointment.Customer?.Name</td>
                        <td>@appointment.Child?.Name</td>
                        <td>
                            @if (appointment.VaccineId != null)
                            {
                                @appointment.Vaccine?.Name
                            }
                            else if (appointment.VaccinePackageId != null)
                            {
                                @appointment.VaccinePackage?.Name
                            }
                            else
                            {
                                <span>N/A</span>
                            }
                        </td>
                        <td>@appointment.AppointmentDate</td>
                        <td>@appointment.Status</td>
                        <td>@appointment.Notes</td>
                        <td>@appointment.CreatedBy</td> 
                        <td>@appointment.DateCreated</td> 
                        <td>
                            @if (appointment.Status == "Booked")
                            {
                                <button @onclick="() => OpenModal(appointment)" class="btn btn-primary">Schedule</button>
                            }
                            else if (appointment.Status == "Assigned")
                            {
                                <button @onclick="() => CompleteAppointment(appointment)" class="btn btn-success">Complete</button>
                                <button @onclick="() => CancelAppointment(appointment)" class="btn btn-danger">Cancel</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="modal @(isModalVisible ? "show" : "")" id="scheduleModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Schedule Vaccination</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="CloseModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (selectedAppointment != null)
                {
                    <EditForm Model="@newVaccinationSchedule" OnValidSubmit="@SaveVaccinationSchedule">
                        <div class="form-group">
                            <label for="scheduledDate">Scheduled Date:</label>
                            <Microsoft.AspNetCore.Components.Forms.InputDate id="scheduledDate" @bind-value="newVaccinationSchedule.ScheduledDate" class="form-control" />
                            <ValidationMessage For="@(() => newVaccinationSchedule.ScheduledDate)" />
                        </div>

                        <div class="form-group">
                            <label for="doctorId">Doctor:</label>
                            <InputSelect id="doctorId" @bind-Value="newVaccinationSchedule.DoctorId" class="form-control">
                                @foreach (var doctor in doctors)
                                {
                                    <option value="@doctor.Id">@doctor.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label>Available Slots for Doctor @(doctors.FirstOrDefault(d => d.Id == newVaccinationSchedule.DoctorId)?.Name ?? "N/A") on @newVaccinationSchedule.ScheduledDate.ToShortDateString():</label>
                            @if (newVaccinationSchedule.DoctorId != 0 && newVaccinationSchedule.ScheduledDate != DateTime.MinValue) //Check DoctorID and ScheduledDate
                            {
                                <div class="available-slots">
                                    @foreach (var slot in GetAvailableSlots(newVaccinationSchedule.DoctorId, newVaccinationSchedule.ScheduledDate))
                                    {
                                        <button type="button" @onclick="() => newVaccinationSchedule.ScheduledDate = slot" class="btn btn-outline-primary mr-2 mb-2">@slot.ToString("HH:mm")</button>
                                    }
                                    @if (!GetAvailableSlots(newVaccinationSchedule.DoctorId, newVaccinationSchedule.ScheduledDate).Any())
                                    {
                                        <p>No available slots for the selected date and doctor.</p>
                                    }
                                </div>
                            }
                            else
                            {
                                <p>Please select a doctor and date to see available slots.</p>
                            }

                        </div>

                        <input type="hidden" @bind-value="newVaccinationSchedule.ChildId" />
                        <input type="hidden" @bind-value="newVaccinationSchedule.VaccineId" />
                        <input type="hidden" @bind-value="newVaccinationSchedule.VaccinePackageId" />
                        <button type="submit" class="btn btn-primary">Save Schedule</button>
                        <button type="button" @onclick="() => CloseModal()" class="btn btn-secondary">Cancel</button>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>


@code {
    private string searchTerm = "";
    private bool isModalVisible = false;
    private List<Appointment> appointments = new();
    private List<Appointment> filteredAppointments = new();
    private Appointment? selectedAppointment;
    private VaccinationSchedule newVaccinationSchedule = new();
    private List<Doctor> doctors = new();

    protected override async Task OnInitializedAsync()
    {
        appointments = await GetAppointments();
        filteredAppointments = appointments;
        doctors = await GetDoctors();
    }

    private async Task OpenModal(Appointment appointment)
    {
        ScheduleAppointment(appointment);
        isModalVisible = true;
        await JSRuntime.InvokeVoidAsync("showModal", "#scheduleModal"); 
    }

    private async Task CloseModal()
    {
        isModalVisible = false;
        selectedAppointment = null;
        await JSRuntime.InvokeVoidAsync("hideModal", "#scheduleModal"); 
    }

    private async Task<List<Appointment>> GetAppointments()
    {
        // return await HttpClient.GetFromJsonAsync<List<Appointment>>("api/appointments");
        await Task.Delay(100);
        return new List<Appointment>()
        {
            new Appointment { Id = 1, Customer = new User{Name="John Doe"}, Child = new Child{Name="Alice", Id=1}, Vaccine = new Vaccine{Name="Flu Vaccine", Id=1}, VaccineId = 1, AppointmentDate = DateTime.Now, Status = "Booked", Notes = "First appointment" },
            new Appointment { Id = 2, Customer = new User{Name="Jane Smith"}, Child = new Child{Name="Bob", Id=2}, VaccinePackage = new VaccinePackage{Name="Child Package", Id=2}, VaccinePackageId = 2, AppointmentDate = DateTime.Now.AddDays(7), Status = "Booked", Notes = "Follow-up" },
            new Appointment { Id = 3, Customer = new User{Name="Michael Johnson"}, Child = new Child{Name="Charlie", Id=3}, Vaccine = new Vaccine{Name="Hepatitis B", Id=3}, VaccineId = 3, AppointmentDate = DateTime.Now.AddDays(2), Status = "Pending", Notes = "Initial dose" },
            new Appointment { Id = 4, Customer = new User{Name="Emily Davis"}, Child = new Child{Name="Daisy", Id=4}, VaccinePackage = new VaccinePackage{Name="Basic Immunization", Id=4}, VaccinePackageId = 4, AppointmentDate = DateTime.Now.AddDays(10), Status = "Confirmed", Notes = "Routine checkup" },
            new Appointment { Id = 5, Customer = new User{Name="David Wilson"}, Child = new Child{Name="Ethan", Id=5}, Vaccine = new Vaccine{Name="MMR", Id=5}, VaccineId = 5, AppointmentDate = DateTime.Now.AddDays(4), Status = "Booked", Notes = "Measles, Mumps, Rubella vaccine" },
            new Appointment { Id = 6, Customer = new User{Name="Sophia Martinez"}, Child = new Child{Name="Fiona", Id=6}, VaccinePackage = new VaccinePackage{Name="Full Protection Package", Id=6}, VaccinePackageId = 6, AppointmentDate = DateTime.Now.AddDays(14), Status = "Pending", Notes = "Comprehensive vaccination" },
            new Appointment { Id = 7, Customer = new User{Name="Daniel Anderson"}, Child = new Child{Name="George", Id=7}, Vaccine = new Vaccine{Name="Chickenpox", Id=7}, VaccineId = 7, AppointmentDate = DateTime.Now.AddDays(5), Status = "Cancelled", Notes = "Parent request reschedule" },
            new Appointment { Id = 8, Customer = new User{Name="Olivia Thomas"}, Child = new Child{Name="Hannah", Id=8}, Vaccine = new Vaccine{Name="Polio Vaccine", Id=8}, VaccineId = 8, AppointmentDate = DateTime.Now.AddDays(3), Status = "Confirmed", Notes = "Final dose" },
            new Appointment { Id = 9, Customer = new User{Name="James White"}, Child = new Child{Name="Ian", Id=9}, VaccinePackage = new VaccinePackage{Name="Teen Vaccine Package", Id=9}, VaccinePackageId = 9, AppointmentDate = DateTime.Now.AddDays(9), Status = "Pending", Notes = "Scheduled for next visit" },
            new Appointment { Id = 10, Customer = new User{Name="Charlotte Harris"}, Child = new Child{Name="Jack", Id=10}, Vaccine = new Vaccine{Name="COVID-19 Vaccine", Id=10}, VaccineId = 10, AppointmentDate = DateTime.Now.AddDays(7), Status = "Booked", Notes = "Booster dose" },
            new Appointment { Id = 11, Customer = new User{Name="John Doe"}, Child = new Child{Name="Alice", Id=1}, Vaccine = new Vaccine{Name="Flu Vaccine", Id=1}, VaccineId = 1, AppointmentDate = DateTime.Now, Status = "Booked", Notes = "First appointment" },
            new Appointment { Id = 12, Customer = new User{Name="Jane Smith"}, Child = new Child{Name="Bob", Id=2}, VaccinePackage = new VaccinePackage{Name="Child Package", Id=2}, VaccinePackageId = 2, AppointmentDate = DateTime.Now.AddDays(7), Status = "Booked", Notes = "Follow-up" },
            new Appointment { Id = 13, Customer = new User{Name="Michael Johnson"}, Child = new Child{Name="Charlie", Id=3}, Vaccine = new Vaccine{Name="Hepatitis B", Id=3}, VaccineId = 3, AppointmentDate = DateTime.Now.AddDays(2), Status = "Pending", Notes = "Initial dose" },
            new Appointment { Id = 14, Customer = new User{Name="Emily Davis"}, Child = new Child{Name="Daisy", Id=4}, VaccinePackage = new VaccinePackage{Name="Basic Immunization", Id=4}, VaccinePackageId = 4, AppointmentDate = DateTime.Now.AddDays(10), Status = "Confirmed", Notes = "Routine checkup" },
            new Appointment { Id = 15, Customer = new User{Name="David Wilson"}, Child = new Child{Name="Ethan", Id=5}, Vaccine = new Vaccine{Name="MMR", Id=5}, VaccineId = 5, AppointmentDate = DateTime.Now.AddDays(4), Status = "Booked", Notes = "Measles, Mumps, Rubella vaccine" },
            new Appointment { Id = 16, Customer = new User{Name="Sophia Martinez"}, Child = new Child{Name="Fiona", Id=6}, VaccinePackage = new VaccinePackage{Name="Full Protection Package", Id=6}, VaccinePackageId = 6, AppointmentDate = DateTime.Now.AddDays(14), Status = "Pending", Notes = "Comprehensive vaccination" },
            new Appointment { Id = 17, Customer = new User{Name="Daniel Anderson"}, Child = new Child{Name="George", Id=7}, Vaccine = new Vaccine{Name="Chickenpox", Id=7}, VaccineId = 7, AppointmentDate = DateTime.Now.AddDays(5), Status = "Cancelled", Notes = "Parent request reschedule" },
            new Appointment { Id = 18, Customer = new User{Name="Olivia Thomas"}, Child = new Child{Name="Hannah", Id=8}, Vaccine = new Vaccine{Name="Polio Vaccine", Id=8}, VaccineId = 8, AppointmentDate = DateTime.Now.AddDays(3), Status = "Confirmed", Notes = "Final dose" },
            new Appointment { Id = 19, Customer = new User{Name="James White"}, Child = new Child{Name="Ian", Id=9}, VaccinePackage = new VaccinePackage{Name="Teen Vaccine Package", Id=9}, VaccinePackageId = 9, AppointmentDate = DateTime.Now.AddDays(9), Status = "Pending", Notes = "Scheduled for next visit" },
            new Appointment { Id = 20, Customer = new User{Name="Charlotte Harris"}, Child = new Child{Name="Jack", Id=10}, Vaccine = new Vaccine{Name="COVID-19 Vaccine", Id=10}, VaccineId = 10, AppointmentDate = DateTime.Now.AddDays(7), Status = "Booked", Notes = "Booster dose" }
        };

    }

    private void SearchAppointments()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredAppointments = appointments; 
            return;
        }

        searchTerm = searchTerm.ToLower(); 

        filteredAppointments = appointments.Where(appointment =>
            (appointment.Customer?.Name?.ToLower().Contains(searchTerm) ?? false) ||
            (appointment.Child?.Name?.ToLower().Contains(searchTerm) ?? false) ||
            (appointment.Vaccine?.Name?.ToLower().Contains(searchTerm) ?? false) ||
            (appointment.VaccinePackage?.Name?.ToLower().Contains(searchTerm) ?? false) ||
            appointment.AppointmentDate.ToString("dd/MM/yyyy").Contains(searchTerm) ||
            (appointment.Status?.ToLower().Contains(searchTerm) ?? false) ||
            (appointment.Notes?.ToLower().Contains(searchTerm) ?? false)
        ).ToList();
    }

    private async Task<List<Doctor>> GetDoctors()
    {
        await Task.Delay(100);
        return new List<Doctor>() {
            new Doctor { Id = 1, Name = "Dr. Smith", DateFree = { DateTime.Today.AddHours(9).AddMinutes(30), DateTime.Today.AddHours(13).AddMinutes(30) } },
            new Doctor { Id = 2, Name = "Dr. Jones", DateFree = { DateTime.Today.AddHours(15).AddMinutes(30), DateTime.Today.AddHours(18).AddMinutes(30) } }
        };
    }

    private void ScheduleAppointment(Appointment appointment)
    {
        selectedAppointment = appointment;
        newVaccinationSchedule = new VaccinationSchedule
            {
                ChildId = appointment.Child.Id,
                VaccineId = appointment.VaccineId,
                VaccinePackageId = appointment.VaccinePackageId,
                ScheduledDate = appointment.AppointmentDate,
                Status = "Pending",
                CreatedBy = 1,
                DoctorId = 0
            };
    }

    private List<DateTime> GetAvailableSlots(int doctorId, DateTime date)
    {
        List<DateTime> availableSlots = new();
        Doctor doctor = doctors.FirstOrDefault(d => d.Id == doctorId);
        foreach (var slot in doctor.DateFree)
        {
            if (slot.Date == date.Date)
            {
                availableSlots.Add(slot);
            }
        }
        return availableSlots;
    }

    private async Task SaveVaccinationSchedule()
    {
        // await HttpClient.PostAsJsonAsync("api/vaccinationschedules", newVaccinationSchedule);

        selectedAppointment.Status = "Assigned";
        // await UpdateAppointment(selectedAppointment);

        selectedAppointment = null; // Close the scheduling section
        await CloseModal();
        await JSRuntime.InvokeVoidAsync("alert", "Vaccination scheduled successfully!");
        // NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); // Refresh the page
    }

    private async Task CompleteAppointment(Appointment appointment)
    {
        appointment.Status = "Completed";
        // await UpdateAppointment(appointment);
        await JSRuntime.InvokeVoidAsync("alert", "Appointment completed!");
        // NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); // Refresh the page
    }

    private async Task CancelAppointment(Appointment appointment)
    {
        appointment.Status = "Cancelled";
        // await UpdateAppointment(appointment);
        await JSRuntime.InvokeVoidAsync("alert", "Appointment cancelled!");
        // NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); // Refresh the page
    }

    public class Appointment
    {
        public int Id { get; set; }
        public User Customer { get; set; }
        public Child Child { get; set; }
        public Vaccine Vaccine { get; set; }
        public VaccinePackage VaccinePackage { get; set; }
        public int? VaccineId { get; set; }
        public int? VaccinePackageId { get; set; }
        public DateTime AppointmentDate { get; set; }
        public string Status { get; set; }
        public string Notes { get; set; }
        public int CreatedBy { get; set; }
        public DateTime DateCreated { get; set; }
    }

    public class Doctor
    {
        public Doctor()
        {
            DateFree = new();
        }

        public int Id { get; set; }
        public string Name { get; set; }
        public List<DateTime> DateFree { get; set; }
    }

    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class Child
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class Vaccine
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class VaccinePackage
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class VaccinationSchedule
    {
        public int Id { get; set; }
        public int ChildId { get; set; }
        public int? VaccineId { get; set; }
        public int? VaccinePackageId { get; set; }
        public DateTime ScheduledDate { get; set; }
        public string Status { get; set; }
        public int CreatedBy { get; set; }
        public int DoctorId { get; set; }
    }
}

<script>
    window.showModal = (selector) => {
        $(selector).modal('show');
    };

    window.hideModal = (selector) => {
        $(selector).modal('hide');
    };
</script>

<style>
    .table-container {
        width: 100%; /* Chiều rộng container */
        max-height: 500px; /* Chiều cao tối đa của bảng */
        overflow-y: auto; /* Kéo dọc cho bảng */
    }

    .table-fixed {
        overflow-x: auto; /* Kéo ngang cho bảng */
    }

        .table-fixed th, .table-fixed td {
            overflow: hidden; /* Ẩn nội dung vượt quá chiều rộng cột */
            text-overflow: ellipsis; /* Hiển thị dấu "..." nếu nội dung bị ẩn */
            padding: 8px; /* Padding cho các ô */
            border: 1px solid #dee2e6; /* Border cho các ô */
            box-sizing: border-box; /* Tính cả padding và border vào độ rộng cột */
        }
</style>