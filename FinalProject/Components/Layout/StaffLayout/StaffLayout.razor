@inherits LayoutComponentBase
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using Data.DTOs
@using Repository.Interface
@inject IUserRepository UserRepository

<div class="page">
    <div class="sidebar">
        <StaffNavMenu />
    </div>

    <main>
        <div class="top-row px-4 d-flex align-items-center justify-content-end">
            <div class="dropdown">
                <button class="btn btn-link dropdown-toggle p-0 border-0" type="button" id="userMenu" data-bs-toggle="dropdown" aria-expanded="false">
                    <img src="https://i.pravatar.cc/48" class="rounded-circle border shadow-sm" alt="User Avatar" style="width: 48px; height: 48px; object-fit: cover;" />
                </button>
                <ul class="dropdown-menu dropdown-menu-end shadow-sm mt-2" aria-labelledby="userMenu" style="background-color: #f8f9fa; border-radius: 8px;">
                    <li class="py-3 text-center">
                        <strong class="d-block" style="font-size: 1.1rem; color: #333;">@GetUserName()</strong>
                        <small class="text-muted" style="font-size: 0.9rem; margin-top: 4px;">@role.ToUpper()</small>
                    </li>
                    <li><hr class="dropdown-divider"></li>
                    <li class="d-flex justify-content-center">
                        <button class="dropdown-item py-2 text-center" style="border: none; background: transparent; width: 100%; display: flex; align-items: center; justify-content: center; color: #333;" data-bs-toggle="modal" data-bs-target="#profileModal">
                            <i class="fas fa-user me-2"></i> Profile
                        </button>
                    </li>
                    <li class="d-flex justify-content-center text-center">
                        <a class="dropdown-item py-2 text-center text-danger w-100" style="border: none; background: transparent; display: flex; align-items: center; justify-content: center; margin: 0;" href="/logout">
                            <i class="fas fa-sign-out-alt me-2"></i> Logout
                        </a>
                    </li>
                </ul>
            </div>
        </div>

        <!-- Modal for Profile -->
        <div class="modal fade" id="profileModal" tabindex="-1" aria-labelledby="profileModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content rounded-3 shadow-lg">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title" id="profileModalLabel">User Profile</h5>
                        <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="d-flex align-items-center mb-3">
                            <img src="https://i.pravatar.cc/48" class="rounded-circle me-3" alt="User Avatar" style="width: 100px; height: 100px; object-fit: cover;" />
                            <div>
                                <h5 class="mb-0">@UserProfile?.FullName</h5>
                                <small class="text-muted">@UserProfile?.Position</small>
                            </div>
                        </div>
                        <hr>
                        <div class="mb-3">
                            <p><strong>User Name:</strong> @UserProfile?.Username</p>
                            <p><strong>Full Name:</strong> @UserProfile?.FullName</p>
                            <p><strong>Email:</strong> @UserProfile?.Email</p>
                            <p><strong>Phone Number:</strong> @UserProfile?.PhoneNumber</p>
                            <p><strong>Address:</strong> @UserProfile?.Address</p>
                            <p><strong>Gender:</strong> @UserProfile?.Gender</p>
                            <p><strong>Birthdate:</strong> @(UserProfile?.Birthdate?.ToShortDateString() ?? "N/A")</p>
                            <p><strong>Role:</strong> @UserProfile?.Role</p>
                            <p><strong>Specialty:</strong> @UserProfile?.Specialty</p>
                            <p><strong>License Number:</strong> @UserProfile?.LicenseNumber</p>
                            <p><strong>Position:</strong> @UserProfile?.Position</p>
                            <p><strong>Years of Experience:</strong> @UserProfile?.YearsOfExperience</p>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    // private void Logout()
    // {
    //     Navigation.NavigateTo("/logout", forceLoad: true);
    // }

    private string role = "Loading...";
    private UserInfoDTO UserProfile;

    protected override async Task OnInitializedAsync()
    {
        role = await GetRoleAsync();
        UserProfile = await GetUserProfile();
    }

    private async Task<UserInfoDTO> GetUserProfile()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
        if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
        {
            return await UserRepository.GetByIdAsync(userId);
        }
        return null;
    }

    private bool IsUserAuthenticated()
    {
        var user = HttpContextAccessor.HttpContext.User;
        return user.Identity is not null && user.Identity.IsAuthenticated;
    }

    private string GetUserName()
    {
        var user = HttpContextAccessor.HttpContext.User;
        return user.Identity?.Name ?? "User";
    }

    private async Task<string> GetRoleAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value ?? "Role";
    }
}